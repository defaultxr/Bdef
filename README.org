#+TITLE: bdef

"Buffer definition"; abstraction of audio buffers for Lisp sound synthesis systems.

Basically, this simplifies buffer management in [[https://github.com/byulparan/cl-collider][cl-collider]], making them easier to use.

*Note:* Previously at the URL for this repository was Bdef for SuperCollider. That repository has since moved [[https://github.com/defaultxr/supercollider-bdef][here]].

* Features

** Can be re-evaluated without loading a new buffer:

Compare:

#+BEGIN_SRC lisp
  (defparameter *buf* (cl-collider:buffer-read "/buffer.wav"))

  (defparameter *buf* (cl-collider:buffer-read "/buffer.wav")) ;; the same variable, and same file!

  (length (remove-if #'null (slot-value *s* 'cl-collider::buffers))) ;; => 2 -- duplicate buffers!
#+END_SRC

versus:

#+BEGIN_SRC lisp
  (bdef :buf "/buffer.wav") ;; here we give it the name :buf

  (bdef :foo "/buffer.wav") ;; same file, different "name"...

  (length (remove-if #'null (slot-value *s* 'cl-collider::buffers))) ;; => 1 -- no duplicate buffers :D
#+END_SRC

...To force a file to be reloaded, simply call ~bdef-free~ on it, then call ~bdef~ again.

** Automatically converts files unsupported by the backend if you have ffmpeg installed:

#+BEGIN_SRC lisp
(bdef :bar "/blah.mp3") ;; works!
#+END_SRC

It does this by storing them in a temporary directory (~/tmp/bdef/~ by default on linux and mac).

** No additional name needed if loading from a file:

#+BEGIN_SRC lisp
(bdef "/my-file.ogg")
#+END_SRC

** Supports pathname abbreviations:

#+BEGIN_SRC lisp
(bdef "~/cool-sound.wav") ;; will find a cool sound in your home directory
#+END_SRC

** Loads mono files as stereo by default.

For consistency. To load as mono, supply 1 for ~bdef~'s ~num-channels~ keyword argument.

** Supports loading in wavetable format:

#+BEGIN_SRC lisp
(bdef "~/wilhelm.wav" :wavetable t) ;; load the Wilhelm scream as a wavetable
#+END_SRC

** Supports loading envelopes as buffers:

Either as wavetables, or standard.

** Integration with [[https://github.com/byulparan/cl-collider][cl-collider]]:

#+BEGIN_SRC lisp
(cl-collider:bufnum (bdef :sound)) ;; returns the buffer number.

(cl-collider:synth :playbuf :bufnum (bdef :sound)) ;; plays the buffer.
#+END_SRC

Load the ~bdef/cl-collider~ system to enable this.

** Integration with [[https://github.com/defaultxr/cl-patterns][cl-patterns]]:

#+BEGIN_SRC lisp
(cl-patterns:play (bdef :sound)) ;; plays the buffer using the *cl-collider-buffer-preview-synth* set in cl-patterns.

(cl-patterns:play (cl-patterns:event :instrument :playbuf :bufnum (bdef :sound))) ;; automatically converts bdef to the buffer number.
#+END_SRC

Load the ~bdef/cl-patterns~ system to enable this.

** Designed to work with multiple backends:

At the moment, [[https://supercollider.github.io/][SuperCollider]]/[[https://github.com/byulparan/cl-collider][cl-collider]] is the main one. Support for [[https://incudine.sourceforge.net/][Incudine]] is planned.

Enable the cl-collider backend like so:

#+BEGIN_SRC lisp
  (ql:quickload :bdef/cl-collider)
#+END_SRC

** Allows metadata about the buffer to be stored:

#+BEGIN_SRC lisp
(setf (bdef-metadata (bdef :snd) :bpm) 99) ;; set :snd's tempo to 99 BPM.

(bdef-metadata (bdef :snd) :bpm) ;; get the stored bpm value.
#+END_SRC

** Automatically set various metadata when a bdef is created:

#+BEGIN_SRC lisp
;; load a file with its bpm in its filename:
(bdef :my-file "~/my-file-128bpm.wav")

;; the bpm is automatically stored as metadata:
(bdef-metadata :my-file :bpm) ;; => 128
#+END_SRC

You can also add your own auto-metadata keys with the ~define-bdef-auto-metadata~ macro or ~set-bdef-auto-metadata~ function, or remove them with the ~remove-bdef-auto-metadata~ function.

Additional metadata is loaded asynchronously in background threads using futures from the [[https://common-lisp.net/project/eager-future/][eager-future2]] library. If a requested metadatum is still being generated, ~bdef-metadata~ will block until the result is available.

** Automatically generate metadata from functions:

#+BEGIN_SRC lisp
(setf (bdef-metadata :foo :bpm) 142) ;; sets the "tempo" metadata key instead to its beats per minute value

;; tempo is stored as beats per second:
(bdef-metadata :foo :tempo) ;; => 71/30 (142 beats per minute in beats per second)

;; beats per minute is still available, dynamically calculated from the tempo key:
(bdef-metadata :foo :bpm) ;; => 142
#+END_SRC

You can define your own "dynamic metadata" with ~define-bdef-dynamic-metadata~.

** "Splits" functionality to define split points or regions in buffers:

#+BEGIN_SRC lisp
  (make-splits (list 0 0.25 0.5 0.75) :bdef (bdef :foo)) ;; splits at the start, 25%, 50%, and 75% into the file.

  (splits-from-audacity-labels "/path/to/label.txt") ;; make a splits object from an Audacity labels file.

  (setf (bdef-splits :my-bdef) *) ;; set the :my-bdef bdef's :splits metadatum to the splits object generated from the above.

  (splits-point :my-bdef 3 :start :second) ;; get the start of :my-bdef's fourth split in seconds.
#+END_SRC

** Splits integration with cl-patterns:

#+BEGIN_SRC lisp
  (pbind :instrument :playbuf
         :bufnum (bdef :my-bdef)
         :split (pwhite 0 (1- (splits-length :my-bdef))) ;; pick a random split
         :embed (psplits) ;; the psplits pattern yields events with :start, :end, and :dur keys to play the split specified by :split from the :splits metadatum of the bdef specified as :bufnum.
         :dur 1)
#+END_SRC

** Integration with the [[https://aubio.org/][Aubio]] audio analysis library if installed:

#+BEGIN_SRC lisp
(bdef::splits-from-aubio-onsets "/path/to/audio/file.wav")

(bdef :pee "/path/to/pee.wav") ;; since no BPM is listed in the filename, aubio is used to detect it (if installed)...

(bdef-metadata :pee :tempo) ;; ...and it is stored in the bdef's :tempo metadatum! nice!
#+END_SRC

* Future

- Right now, ~cl-collider~ is the only supported backend. In the future, [[http://incudine.sourceforge.net/][Incudine]] should work as well.
- Support for configurable pathname shortcuts. (i.e. set ~foo~ as a shortcut to ~/a/long/path/name/~, then provide ~"foo/bar.wav"~ instead of ~"/a/long/path/name/bar.wav"~.)
- Loading with ~num-channels~ set to 1 loads only the first channel. Might make more sense to mix all channels down to mono, perhaps as an option.
